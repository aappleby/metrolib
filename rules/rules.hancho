import hancho

cpp_config = hancho.Config(
  cpp_std     = "-std=gnu++2a",
  build_type  = "-g -O0",

  c_flags   = [],
  cpp_flags = [],
  warnings  = [],
  defines   = [],
  includes  = ["."],
  sys_libs  = [],

  joined_warnings  = "{join_prefix('-W', warnings)}",
  joined_defines   = "{join_prefix('-D', defines)}",
  joined_includes  = "{join_prefix('-I', includes)}",
  joined_sys_libs  = "{join_prefix('-l', sys_libs)}",
)

compile_cpp = hancho.Config(
  cpp_config,
  desc    = "Compiling C++ {rel(in_src)} => {rel(out_obj)}",
  command = "g++ -MMD {cpp_std} {build_type} {cpp_flags} {joined_warnings} {joined_defines} {joined_includes} -c {rel(in_src)} -o {rel(out_obj)}",
  out_obj = "{swap_ext(in_src, '.o')}",
  dep_gcc = "{swap_ext(in_src, '.d')}",
)

link_cpp_lib = hancho.Config(
  cpp_config,
  desc    = "Bundling {rel(out_lib)}",
  command = "ar rcs {rel(out_lib)} {rel(in_objs)}",
)

link_cpp_bin = hancho.Config(
  cpp_config,
  desc = "Linking {rel(out_bin)}",
  command = "g++ {linker_group} {joined_sys_libs} -o {rel(out_bin)}",
  linker_group = [
    "-Wl,--as-needed",
    "-Wl,--no-undefined",
    "-Wl,--start-group",
    "{rel(in_objs)}",
    "-Wl,--end-group",
  ],
)

exports.compile_cpp = compile_cpp
exports.link_cpp_bin = link_cpp_bin

####################################################################################################

def cpp_bin(*, in_srcs = [], in_objs = [], in_libs = [], out_bin, **kwargs):
  objs = [compile_cpp(kwargs, in_src = file) for file in hancho.flatten(in_srcs)]
  bin  = link_cpp_bin(kwargs, in_objs = [objs, in_objs, in_libs], out_bin = out_bin)

  return hancho.Task(
    command = ":",
    in_srcs = in_srcs,
    in_objs = in_objs,
    in_libs = in_libs,
    out_bin = bin.promise("out_bin")
  )

exports.cpp_bin = hancho.Config(call = cpp_bin)

####################################################################################################

def cpp_lib(*, in_srcs = [], in_objs = [], in_libs = [], out_lib, **kwargs):
  objs = [compile_cpp(kwargs, in_src = file) for file in hancho.flatten(in_srcs)]
  lib  = link_cpp_lib(kwargs, in_objs = [objs, in_objs, in_libs], out_lib = out_lib)

  return hancho.Task(
    command = ":",
    in_srcs = in_srcs,
    in_objs = in_objs,
    in_libs = in_libs,
    out_lib = lib.promise("out_lib")
  )

exports.cpp_lib = hancho.Config(call = cpp_lib)

####################################################################################################

exports.make = hancho.Config(
  command     = "make --quiet -C {make_path} -f {make_file} > /dev/null",
  make_path   = "{path.dirname(in_makefile)}",
  make_file   = "{path.basename(in_makefile)}",
  in_makefile = None,
)

####################################################################################################
