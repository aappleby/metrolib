export.make = hancho.command(
  command = "make --quiet -C {path.dirname(rel_source_files[0])} -f {path.basename(rel_source_files[0])} > /dev/null"
)
export.c_config = hancho.extend(
  cpp_std     = "-std=gnu++2a",
  build_type  = "-g -O0",

  c_flags     = [],
  cpp_flags   = [],
  warnings    = [],
  defines     = [],
  includes    = ["."],
  sys_libs    = [],

  joined_warnings  = "{join_prefix('-W', warnings)}",
  joined_defines   = "{join_prefix('-D', defines)}",
  joined_includes  = "{join_prefix('-I', includes)}",
  joined_sys_libs  = "{join_prefix('-l', sys_libs)}",
)

export.compile_cpp = export.c_config.command(
  desc        = "Compiling C++ {rel_source_files} => {rel_build_files}",
  command     = "g++ -MMD {cpp_std} {build_type} {cpp_flags} {joined_warnings} {joined_defines} {joined_includes} -c {rel_source_files} -o {rel_build_files}",
  build_files = "{swap_ext(source_files, '.o')}",
  build_deps  = "{swap_ext(source_files, '.d')}",
)

export.compile_c     = export.c_config.command(
  desc        = "Compiling C {rel_source_files} => {rel_build_files}",
  command     = "gcc -MMD {build_type} {c_flags} {joined_warnings} {joined_defines} {joined_includes} -c {rel_source_files} -o {rel_build_files}",
  build_files = "{swap_ext(source_files, '.o')}",
  build_deps  = "{swap_ext(source_files, '.d')}",
)

export.link_c_lib = export.c_config.command(
  desc        = "Bundling {rel_build_files}",
  command     = "ar rcs {rel_build_files} {rel_source_files}",
)

export.link_c_bin  = export.c_config.command(
  desc       = "Linking {rel_build_files}",
  command    = "g++ {rel_source_files} {joined_sys_libs} -o {rel_build_files}",
)

def cpp_objs(config):
  source_files = hancho.flatten(config.pop("source_files"))
  return [file if isinstance(file, hancho.Task) else export.compile_cpp(file, config) for file in source_files]

def c_objs(config):
  source_files = hancho.flatten(config.pop("source_files"))
  return [file if isinstance(file, hancho.Task) else export.compile_c(file, config) for file in source_files]

def cpp_bin(config):
  build_files = config.pop("build_files")
  return export.link_c_bin(cpp_objs(config), build_files, config)

def cpp_lib(config):
  build_files = config.pop("build_files")
  return export.link_c_lib(cpp_objs(config), build_files, config)

def c_lib(config):
  build_files = config.pop("build_files")
  return export.link_c_lib(c_objs(objs), build_files, config)

export.cpp_bin     = hancho.callback(cpp_bin)
export.cpp_lib     = hancho.callback(cpp_lib)
export.c_lib       = hancho.callback(c_lib)
