from hancho import *

build_config.set(
  build_type  = "-g -O0",
  warnings    = "-Wunused-variable -Werror",
  defines     = "-DCONFIG_DEBUG",
  cpp_std     = "-std=gnu++2a",
  includes    = "-I.",
)

compile_cpp = build_config.rule(
  desc        = "Compiling C++ {rel_source_files} => {rel_build_files}",
  command     = "{tool} -MMD {cpp_std} {warnings} {build_type} {includes} {defines} -c {rel_source_files} -o {rel_build_files}",
  build_files = "{swap_ext(source_files, '.o')}",
  build_deps  = "{swap_ext(source_files, '.d')}",
  tool        = "g++",
)

compile_c     = build_config.rule(
  desc        = "Compiling C {rel_source_files} => {rel_build_files}",
  command     = "{tool} -MMD {warnings} {build_type} {includes} {defines} -c {rel_source_files} -o {rel_build_files}",
  build_files = "{swap_ext(source_files, '.o')}",
  build_deps  = "{swap_ext(source_files, '.d')}",
  tool        = "gcc",
)

link_c_lib = build_config.rule(
  desc        = "Bundling {rel_build_files}",
  command     = "ar rcs {rel_build_files} {rel_source_files}",
)

link_c_bin  = build_config.rule(
  desc       = "Linking {rel_build_files}",
  command    = "{tool} {build_type} {rel_source_files} {libraries} -o {rel_build_files}",
  tool       = "g++",
  libraries  = "",
)

def cpp_bin(source_files, build_files, **kwargs):
  objs = [compile_cpp(file, **kwargs) for file in flatten(source_files)]
  return link_c_bin(objs, build_files, **kwargs)

def cpp_lib(source_files, build_files, **kwargs):
  objs = [compile_cpp(file, **kwargs) for file in flatten(source_files)]
  return link_c_lib(objs, build_files, **kwargs)

def c_lib(source_files, build_files, **kwargs):
  objs = [compile_c(file, **kwargs) for file in flatten(source_files)]
  return link_c_lib(objs, build_files, **kwargs)
