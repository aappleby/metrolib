import hancho

cpp_config = hancho.Config(
  compiler    = "g++",
  linker      = "g++",
  cpp_std     = "-std=gnu++2a",
  build_type  = "-g -O0",
  arch        = "",

  c_flags   = [],
  cpp_flags = [],
  warnings  = [],
  defines   = [],
  includes  = ["."],
  sys_libs  = [],

  joined_warnings  = "{join_prefix('-W', warnings)}",
  joined_defines   = "{join_prefix('-D', defines)}",
  joined_includes  = "{join_prefix('-I', includes)}",
  joined_sys_libs  = "{join_prefix('-l', sys_libs)}",
  joined_link_opts = "{join_prefix('-Wl,', link_opts)}",
)

compile_cpp = hancho.Config(
  cpp_config,
  desc     = "Compiling C++ {rel(in_src)} => {rel(out_obj)}",
  command  = "{compiler} {arch} {cpp_std} {build_type} {cpp_flags} {joined_warnings} {joined_defines} {joined_includes} -MMD -c {rel(in_src)} -o {rel(out_obj)}",
  out_obj  = "{swap_ext(in_src, '.o')}",
  depfile  = "{swap_ext(in_src, '.d')}",
)

link_cpp_lib = hancho.Config(
  cpp_config,
  desc    = "Bundling {rel(out_lib)}",
  command = "ar rcs {rel(out_lib)} {rel(in_objs)}",
)

link_cpp_bin = hancho.Config(
  cpp_config,
  desc = "Linking {rel(out_bin)}",
  command = "{linker} {linker_group} {joined_sys_libs} -o {rel(out_bin)}",
  linker_group = [
    "-Wl,--as-needed",
    "-Wl,--no-undefined",
    "-Wl,--start-group",
    "{rel(in_objs)}",
    "-Wl,--end-group",
  ],
)

exports.compile_cpp = compile_cpp
exports.link_cpp_bin = link_cpp_bin

"""
rv_compile = rv_base.extend(
  command    = "riscv64-unknown-elf-gcc -MMD {arch} -c {rel(in_src)} {rel(in_src)}",
  arch       = "-march=rv32i -mabi=ilp32 -mstrict-align",
  cpp_std    = "-std=gnu++2a",
  build_type = "-g -Os",
  out_obj    = "{swap_ext(in_src, '.o')}",
  depfile    = "{swap_ext(in_src, '.d')}",
)

rv_link = rv_base.extend(
  command   = "riscv64-unknown-elf-gcc {arch} {link_flags} -lgcc {files_in} -o {files_out}",
  link_flags = [
    "-nostdlib",
    "-nostartfiles",
    "-Wl,-T {linkerscript}",
  ],
  arch      = "-march=rv32i -mabi=ilp32 -mstrict-align",
  deps      = rv_base.deps + ["{linkerscript}"],
  linkerscript = "{load_dir}/link.ld",
)
"""

####################################################################################################

def cpp_bin(*, name, in_srcs = [], in_objs = [], in_libs = [], out_bin, **kwargs):
  objs = [compile_cpp(kwargs, in_src = file) for file in hancho.flatten(in_srcs)]
  bin  = link_cpp_bin(kwargs, name = name, in_objs = [objs, in_objs, in_libs], out_bin = out_bin)
  return bin

exports.cpp_bin = hancho.Config(call = cpp_bin)

####################################################################################################

def cpp_lib(*, name, in_srcs = [], in_objs = [], in_libs = [], out_lib, **kwargs):
  objs = [compile_cpp(kwargs, in_src = file) for file in hancho.flatten(in_srcs)]
  lib  = link_cpp_lib(kwargs, name = name, in_objs = [objs, in_objs, in_libs], out_lib = out_lib)
  return lib

exports.cpp_lib = hancho.Config(call = cpp_lib)

####################################################################################################

exports.make = hancho.Config(
  command     = "make --quiet -C {make_path} -f {make_file} {flags} > /dev/null",
  make_path   = "{path.dirname(in_makefile)}",
  make_file   = "{path.basename(in_makefile)}",
  flags       = "",
  in_makefile = None,
)
