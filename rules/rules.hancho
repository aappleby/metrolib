c_config = hancho.extend(
  build_type  = "-g -O0",
  cpp_std     = "-std=gnu++2a",

  warnings    = ["unused-variable", "error"],
  defines     = ["CONFIG_DEBUG"],
  includes    = ["{rel_path(repo_path, command_path)}"],
  libraries   = [],

  join_prefix      = lambda prefix, strings: ' '.join([prefix+str(s) for s in hancho.flatten(strings)]),
  joined_warnings  = "{join_prefix('-W', warnings)}",
  joined_defines   = "{join_prefix('-D', defines)}",
  joined_includes  = "{join_prefix('-I', includes)}",
  joined_libraries = "{join_prefix('-l', libraries)}",
)

compile_cpp = c_config.command(
  desc        = "Compiling C++ {rel_source_files} => {rel_build_files}",
  command     = "g++ -MMD {cpp_std} {build_type} {joined_warnings} {joined_defines} {joined_includes} -c {rel_source_files} -o {rel_build_files}",
  build_files = "{swap_ext(source_files, '.o')}",
  build_deps  = "{swap_ext(source_files, '.d')}",
)

compile_c     = c_config.command(
  desc        = "Compiling C {rel_source_files} => {rel_build_files}",
  command     = "gcc -MMD {build_type} {joined_warnings} {joined_defines} {joined_includes} -c {rel_source_files} -o {rel_build_files}",
  build_files = "{swap_ext(source_files, '.o')}",
  build_deps  = "{swap_ext(source_files, '.d')}",
)

link_c_lib = c_config.command(
  desc        = "Bundling {rel_build_files}",
  command     = "ar rcs {rel_build_files} {rel_source_files}",
)

link_c_bin  = c_config.command(
  desc       = "Linking {rel_build_files}",
  command    = "g++ {rel_source_files} {joined_libraries} -o {rel_build_files}",
)

def cpp_bin(source_files, build_files, **kwargs):
  objs = [compile_cpp(file, **kwargs) for file in hancho.flatten(source_files)]
  return link_c_bin(objs, build_files, **kwargs)

def cpp_lib(source_files, build_files, **kwargs):
  objs = [compile_cpp(file, **kwargs) for file in hancho.flatten(source_files)]
  return link_c_lib(objs, build_files, **kwargs)

def c_lib(source_files, build_files, **kwargs):
  objs = [compile_c(file, **kwargs) for file in hancho.flatten(source_files)]
  return link_c_lib(objs, build_files, **kwargs)
