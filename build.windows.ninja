################################################################################

# we define SIM_AUDIO in config.h otherwise VSCode gets confused about what's
# enabled and what's not
#-DSIM_AUDIO

# not having NDEBUG turns assert()s on

build_mode = /O2 /D CONFIG_RELEASE /D NDEBUG /D _CRT_SECURE_NO_WARNINGS
#build_mode = /D CONFIG_RELEASE /D _CRT_SECURE_NO_WARNINGS
#build_mode = /D CONFIG_DEBUG /D _CRT_SECURE_NO_WARNINGS

# $(IntDir)vc$(PlatformToolsetVersion).pdb

default_gpp = CL.exe /nologo /std:c++latest /EHsc /showIncludes /W4 /WX /diagnostics:caret /fp:fast /arch:AVX2 /sdl- /Gm- /GS- /Z7 /DEBUG /FS /GL
default_gcc = CL.exe /nologo /std:c17 /showIncludes

default_includes = /Isrc /Isubmodules /Isubmodules/glad /Isrc/tree-sitter/lib/include /Isubmodules/tree-sitter/lib/include
global_libs      = src/SDL2.lib

################################################################################

rule compile_cpp
  command = ${default_gpp} ${build_mode} ${default_includes} ${includes} /c ${in} /Fo"${out}"
  deps = msvc

rule compile_c
  command = ${default_gcc} ${build_mode} ${default_includes} ${includes} /c ${in} /Fo"${out}"
  deps = msvc

#rule link
#  command = link.exe /DEBUG /NOLOGO /MACHINE:X64 /INCREMENTAL:NO /DEBUG /PDB:"${out}.pdb" /OUT:"${out}" ${global_libs} ${in}
rule link
  command = link.exe /DEBUG /NOLOGO /MACHINE:X64 /INCREMENTAL:NO /LTCG /OUT:"${out}" ${global_libs} ${in}

rule lib
  command = Lib.exe /NOLOGO /MACHINE:X64 /OUT:"${out}" ${in}

rule copy
  command = powershell cp ${in} ${out}

# /Fo"x64\Release\\"   Base dir for output files. Needs trailing slash
# /Fd"x64\Release\CoreLib.pdb"

# /Z7                 put debug info in objs
# /Zi                 generate PDB for debug

# /nologo             don't show compiler banner
# /W4                 warning level 4
# /WX                 warnings as errors
# /diagnostics:caret  On compilation error, print file+line+caret pointing to eror
# /sdl-               disable security checks
# /MP                 multiprocess
# /O2                 optimizations
# /Gm-                no minimal rebuild
# /EHsc               Exception handling standard
# /MT                 Causes the application to use the multithread, static version of the run-time library
# /GS-                No buffer security check
# /Zc:wchar_t         wchar_t is a native type
# /Zc:forScope        standard C++ scoping rules
# /Zc:inline          Remove unreferenced functions or data if they're COMDAT or have internal linkage only (off by default).
# /external:W4        "external" headers checked with /W4
# /Gd                 __cdecl calling convention
# /TP                 all files on the command line are CPP

################################################################################
# CoreLib

build obj/CoreLib/Assembler.o     : compile_cpp src/CoreLib/Assembler.cpp
build obj/CoreLib/Constants.o     : compile_cpp src/CoreLib/Constants.cpp
build obj/CoreLib/Debug.o         : compile_cpp src/CoreLib/Debug.cpp
build obj/CoreLib/File.o          : compile_cpp src/CoreLib/File.cpp
build obj/CoreLib/MetroBoyCPU.o   : compile_cpp src/CoreLib/MetroBoyCPU.cpp
build obj/CoreLib/StateManager2.o : compile_cpp src/CoreLib/StateManager2.cpp
build obj/CoreLib/Types.o         : compile_cpp src/CoreLib/Types.cpp

build bin/CoreLib.a : lib $
  obj/CoreLib/Assembler.o $
  obj/CoreLib/Constants.o $
  obj/CoreLib/Debug.o $
  obj/CoreLib/File.o $
  obj/CoreLib/MetroBoyCPU.o $
  obj/CoreLib/StateManager2.o $
  obj/CoreLib/Types.o

################################################################################
# AppLib

build obj/AppLib/AppHost.o        : compile_cpp src/AppLib/AppHost.cpp
build obj/AppLib/Audio.o          : compile_cpp src/AppLib/Audio.cpp
build obj/AppLib/Blitter.o        : compile_cpp src/AppLib/Blitter.cpp
build obj/AppLib/BoxPainter.o     : compile_cpp src/AppLib/BoxPainter.cpp
build obj/AppLib/Console.o        : compile_cpp src/AppLib/Console.cpp
build obj/AppLib/DummyApp.o       : compile_cpp src/AppLib/DummyApp.cpp
build obj/AppLib/DumpPainter.o    : compile_cpp src/AppLib/DumpPainter.cpp
build obj/AppLib/GatePix.o        : compile_cpp src/AppLib/GatePix.cpp
build obj/AppLib/GBBlitter.o      : compile_cpp src/AppLib/GBBlitter.cpp
build obj/AppLib/GLBase.o         : compile_cpp src/AppLib/GLBase.cpp
build obj/AppLib/GridPainter.o    : compile_cpp src/AppLib/GridPainter.cpp
build obj/AppLib/LinePainter.o    : compile_cpp src/AppLib/LinePainter.cpp
build obj/AppLib/Terminus.o       : compile_cpp src/AppLib/Terminus.cpp
build obj/AppLib/TextPainter.o    : compile_cpp src/AppLib/TextPainter.cpp
build obj/AppLib/Viewport.o       : compile_cpp src/AppLib/Viewport.cpp

build bin/AppLib.a : lib $
  obj/AppLib/AppHost.o $
  obj/AppLib/Audio.o $
  obj/AppLib/Blitter.o $
  obj/AppLib/BoxPainter.o $
  obj/AppLib/Console.o $
  obj/AppLib/DummyApp.o $
  obj/AppLib/DumpPainter.o $
  obj/AppLib/GatePix.o $
  obj/AppLib/GBBlitter.o $
  obj/AppLib/GLBase.o $
  obj/AppLib/GridPainter.o $
  obj/AppLib/LinePainter.o $
  obj/AppLib/Terminus.o $
  obj/AppLib/TextPainter.o $
  obj/AppLib/Viewport.o
